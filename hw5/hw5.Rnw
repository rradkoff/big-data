\documentclass[11pt, fleqn]{article}
\input{header.tex}

\usepackage[utf8]{inputenc}

\newtheorem{rlabel}{R-Snippet}
\crefname{rlabel}{r-snippet}{r-snippets}
\Crefname{rlabel}{R-Snippet}{R-Snippets}

\setlength{\parskip}{12pt} % Sets a blank line in between paragraphs
\setlength\parindent{0pt} % Sets the indent for each paragraph to zero

\title{Big Data HW \#5}
\author{Will Clark \& Matthew DeLio \\ 41201-01}
\date{\today}

\begin{document}
\maketitle

<<setup, include=FALSE>>=
library(knitr)
knit_hooks$set(rlabel = function(before, options, envir) {
  if (before) sprintf('\\begin{rlabel}\\label{r:%s}\\hfill{}', options$label) else '\\end{rlabel}'
})
opts_chunk$set(cache=TRUE, echo=FALSE, autodep=TRUE, results='hide', fig.align='center', out.width='.49\\linewidth')
options(scipen = 1, digits = 2)
@

<<start, include=FALSE>>=
## actors network example

library(igraph)

### GRAPH
## read in a graph in the `graphml' formal: xml for graphs.
## it warns about pre-specified ids, but we want this here
## (these ids match up with the castlists in movies.txt)
actnet <- read.graph("actors.graphml",format="graphml")
@

<<palette, include=FALSE>>=
# Original Palette
# paletteF <- colorRampPalette(c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404"), 
#                              space = "Lab")
paletteF <- colorRampPalette(c("#4444FE80", "#44DD4480", "#FED98E80","#D95F0E80"), alpha=T)
plot(1:100, pch=19, col=paletteF(100)[1:100])
@

\section{Plotting the Actors' Network}
<<all_actors, fig.cap="Visualization of Actors' Network", fig.subcap=c('Connected Network', 'Network Clustering'), out.width='.49\\linewidth'>>=
V(actnet)$color <- paletteF(max(degree(actnet)) - min(degree(actnet)) + 1)[degree(actnet) - min(degree(actnet)) + 1]
V(actnet)$frame.color <- V(actnet)$color
plot(actnet, vertex.label=NA, edge.color="#4444440F", edge.curved=F, vertex.size=5, margin=0)

V(actnet)$color <- "#00000001"
V(actnet)$frame.color <- V(actnet)$color
plot(actnet, vertex.label=NA, edge.color="#44444400", edge.curved=F, vertex.size=5, margin=0)

V(actnet)$color <- paletteF(max(degree(actnet)) - min(degree(actnet)) + 1)[degree(actnet) - min(degree(actnet)) + 1]
V(actnet)$frame.color <- V(actnet)$color
@

<<all_actor_calc>>=
all_actors <- length(V(actnet))
mostConnectedDegree <- max(degree(actnet))
mostConnectedActor <- V(actnet)[which.max(degree(actnet))]$name
@

In this section we plot the entire actors' network (see \Vref{fig:all_actors}).  For the plot on the left (\ref{fig:all_actors1}), the node size remained constant with the vertex color varying based on an actor's degree of connectedness (more blue for less connected and more red for well connected).  The data set has \Sexpr{all_actors} actors in it.  The degree of connectedness in the set of actors is shown in \Vref{fig:actor_hist}.  This histogram shows that most actors have worked with between 40 and 60 other actors, although the heavy tail in this distribution indicates that many have worked with far more.  For instance, \textbf{Vernon Dobtcheff} (the most connected actor in the sample) has worked with \Sexpr{mostConnectedDegree} others.

When initially inspecting Figure \ref{fig:all_actors1}, we got the impression we had done something wrong since there were not many nodes plotted on the graph.  To investigate this further, we plotted Figure \ref{fig:all_actors2}.  In this graph, we used alpha blending (partial transparency) on each vertex node with $1/256^{th}$ alpha transparency per vertex.  Therefore, if 256 or more vertices happened to overlap, it would look as if there were one opaque vertex in its place.  This plot clearly shows that first figure groups most actors into clusters and few actors are displayed as independent nodes.  This indicates that many groups of actors, possibly from a particular region or sub-genre, tend to work together.

<<actor_hist, fig.cap="Histogram of Actors' Connectedness">>=
hist(degree(actnet), col='lightblue', xlab='Degree of Connectedness', main='')
@

\section{Kevin Bacon}
<<bacon_start>>=
actor = "Bacon, Kevin"
actor1st <- graph.neighborhood(actnet, 1, V(actnet)[actor])[[1]]
actor2nd <- graph.neighborhood(actnet, 2, V(actnet)[actor])[[1]]
actor3rd <- graph.neighborhood(actnet, 3, V(actnet)[actor])[[1]]
@

<<bacon, fig.cap="Kevin Bacon's Network", fig.subcap=c('1st Degree', '2nd Degree', '3rd Degree'), out.width='.32\\linewidth'>>=
# Generate actor vertex-sizes based on the degree of connectedness on the 
# overall actor network.  These constants were found by manually tuning the
# size histogram.
actorSizes <- 3*log(0.5*degree(actnet)+1)+1

# Color the nodes for the 1st-degree plot
V(actor1st)$color <- "#FF000040"
V(actor1st)[actor]$color <- "#00000080"
V(actor1st)$frame.color <- V(actor1st)$color
V(actor1st)$size <- actorSizes[V(actor1st)]
plot(actor1st, vertex.label=NA, edge.color="#44444480", edge.curved=F, margin=0)

# Color the nodes for the 2nd-degree plot
V(actor2nd)$color <- "#00FF0040"
V(actor2nd)[V(actor1st)]$color <- "#FF000040"
V(actor2nd)[actor]$color <- "#00000080"
V(actor2nd)$frame.color <- V(actor2nd)$color
V(actor2nd)$size <- actorSizes[V(actor2nd)]
plot(actor2nd, vertex.label=NA, edge.color="#4444440F", edge.curved=F, margin=0)

# Color the nodes for the 3rd-degree plot
V(actor3rd)$color <- "#0000FF40"
V(actor3rd)[V(actor2nd)]$color <- "#00FF0040"
V(actor3rd)[V(actor1st)]$color <- "#FF000040"
V(actor3rd)[actor]$color <- "#00000080"
V(actor3rd)$frame.color <- V(actor3rd)$color
V(actor3rd)$size <- actorSizes[V(actor3rd)]
plot(actor3rd, vertex.label=NA, edge.color="#4444440F", edge.curved=F, margin=0)
@

<<bacon_calc>>=
act1stBigger <- sum(degree(actnet)[V(actor1st)] > degree(actnet)[actor])/length(V(actor1st))*100
act1stConns <- length(V(actor1st))-1
act2ndBigger <- sum(degree(actnet)[V(actor2nd)] > degree(actnet)[actor])/length(V(actor2nd))*100
act2ndConns <- length(V(actor2nd))-1
act3rdBigger <- sum(degree(actnet)[V(actor3rd)] > degree(actnet)[actor])/length(V(actor3rd))*100
act3rdConns <- length(V(actor3rd))-1
@

Kevin Bacon's network is shown in \Vref{fig:bacon}.  In each of these plots, the node size of each actor is determined according to their degree within the overall actors' network.  That is, more connected actors have bigger nodes. There are \Sexpr{act1stConns} first-degree connections (shown in red); \Sexpr{act2ndConns} second-degree connections (in green); and \Sexpr{act3rdConns} third-degree connections (in blue); Kevin Bacon's node is black. The size of his network grows exponentially as we consider more degrees of connection.

In \Cref{fig:bacon1} we see his 1st-degree connections and note that while Kevin Bacon is relatively well connected (\Sexpr{act1stConns} connections), \Sexpr{act1stBigger} percent of his connections have a higher degree than he does. In \Cref{fig:bacon2} we visualize 2nd-degree connections and note that of the \Sexpr{act2ndConns} connections, \Sexpr{act2ndBigger} percent have a higher degree.  Because of the way R rendered the visualization, we cannot really see any 1st degree connections.  In \Cref{fig:bacon3}, we visualize 3rd-degree connections and see a much better visual dispersion of the three types of connections.  Of the \Sexpr{act3rdConns} connections, \Sexpr{act3rdBigger} percent have more connections than Kevin Bacon.

\section{Most Common and Connected Actors}
<<q3, include=FALSE>>=
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t", 
                     row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.  
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies, 
                function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")


## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
                       dimnames=list(movie=levels(acti),actor=levels(actj)))

## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)

actNames <- colnames(actmat) 
cleanActNames <- gsub("(.+),\\s+(.+)", "\\2 \\1", actNames)
cleanActNames <- gsub("(.*)(\\(.+\\))(.*)", "\\1 \\3 \\2", cleanActNames)
cleanActNames <- gsub("\\s+", " ", cleanActNames)
cleanMovieNames <- gsub('\\"', "", names(casts))
@

<<freq_connect_count>>=
if (sum(names(nroles) != V(actnet)$name) != 0) {
  warning('Expected the name order in nroles to match the V(actnet) names, all subsequent values may be wrong')
}
actDegree <- degree(actnet)

most_common <- which.max(nroles)
most_connected <- which.max(actDegree)

mostConnected5 <- order(actDegree, decreasing = T)[1:5]
mostConnected5 <- data.frame(Actor = cleanActNames[mostConnected5], 
                             conn = as.integer(actDegree[mostConnected5]), 
                             nFilms = nroles[mostConnected5], row.names= 'Actor')
colnames(mostConnected5) <- c("# of Connections", "# of Films")

mostWorking5 <- order(nroles, decreasing = T)[1:5]
mostWorking5 <- data.frame(Actor = cleanActNames[mostWorking5], 
                           conn = as.integer(actDegree[mostWorking5]), 
                           nFilms = nroles[mostWorking5], row.names= 'Actor')
colnames(mostWorking5) <- c("# of Connections", "# of Films")
@

We can determine the most common actors by summing up the columns of the actors' matrix and sorting the result. The actor appearing in the most films is \textbf{\Sexpr{cleanActNames[most_common]}}, who appeared in \Sexpr{nroles[most_common]} films has appeared with \Sexpr{actDegree[most_common]} other actors. The most connected actor is \textbf{\Sexpr{cleanActNames[most_connected]}}, who has been in \Sexpr{nroles[most_connected]} films and has worked with a total of \Sexpr{actDegree[most_connected]} actors.

The most connected actors and busiest actors (by \# of movies completed) during the period are shown in \Vref{tab:conn,tab:busy} respectively.  Not surprisingly, there is some overlap between the two (\textbf{\Sexpr{cleanActNames[most_connected]}} appears in both lists); it is also worth noting that Ron Jeremy is one of the busiest actors in the drama category (leading us to ask\textemdash where do these data come from?).

<<mostXtables, results='asis', cache=FALSE>>=
library(xtable)
print(xtable(mostConnected5, caption = "Most Connected Actors", label = 'tab:conn'))
print(xtable(mostWorking5, caption = "Busiest Actors", label = 'tab:busy'))
@

%Appendix stuff:
%Histogram of cast sizes
%Optional <- largest casts

<<shortest_path>>=
nactors <- dim(actmat)[2] 
actSample <- sample(1:nactors, 2) 
common_movies <- c()
spath <- get.shortest.paths(actnet, from=actSample[1], to=actSample[2])$vpath[[1]]
shortestGraph <- graph.empty(directed=F) + vertices(spath)
for ( k in 1:(length(spath)-1) ) {
  m1 <- seq_along(casts)[sapply(casts, FUN=function(X) actNames[spath[k]] %in% X)] 
  m2 <- seq_along(casts)[sapply(casts, FUN=function(X) actNames[spath[k+1]] %in% X)] 
  common_movie <- cleanMovieNames[intersect(m1, m2)][1]
  shortestGraph <- add.edges(shortestGraph, 
                             c(which(V(shortestGraph)$name == spath[k]), 
                               which(V(shortestGraph)$name == spath[k+1])),
                             attr = list(label=common_movie))
  common_movies <- c(common_movies, paste(cleanActNames[spath[k]], "was in",
                                          paste("\\textit{", common_movie,"}", sep=''),
                                          "with", cleanActNames[spath[k+1]]))
}
V(shortestGraph)$name <- cleanActNames[V(shortestGraph)$name]
V(shortestGraph)$color <- '#00000040'
V(shortestGraph)$frame.color <- V(shortestGraph)$color
@ 

We randomly select two actors \textbf{\Sexpr{cleanActNames[actSample[1]]}} and \textbf{\Sexpr{cleanActNames[actSample[2]]}} and then determined the shortest path between them. Using R and iGraph, we found that the shortest path contains \Sexpr{length(spath)-1} vertices: \Sexpr{common_movies}. See \Vref{fig:shortgraph} for a visualization of this path.

\section{Association Rules}
<<arules, warning=FALSE>>=
actrulesLowSupport <- apriori(casttrans, parameter=list(support=.0001, confidence=.1, maxlen=2))
lenActrules <- length(actrulesLowSupport)

actrules <- apriori(casttrans, parameter=list(support=.001, confidence=.1, maxlen=2))
write(actrules, 'actrules.csv', sep=';')

nfilms <- length(names(casts))
min_support <- nroles[which.max(nroles)] / nfilms
@

<<arules2>>=
library(xtable)
actrules <- read.csv('actrules.csv', sep=';')
actrules$lhs <- sapply(strsplit(as.character(actrules$rules), " => "), "[", 1)
actrules$rhs <- sapply(strsplit(as.character(actrules$rules), " => "), "[", 2)
actrules <- cbind(actrules, "dir"="=>")
actrules <- actrules[c("lhs", "dir", "rhs", "support", "confidence", "lift")]
colnames(actrules)[which(colnames(actrules)=="dir")] <- ""
@

We first looked for association rules with at least 0.01 percent support and 10 percent confidence; there are around \Sexpr{round(lenActrules/1000)} thousand such rules. To make the list of rules more manageable to look at, we changed the minimum level of support from 0.01 percent to 0.1 percent. This change resulted in a set of 18 rules, displayed in \Vref{tab:actrules}

<<arules3, results='asis'>>=
print(xtable(actrules, digits = c(0, 0, 0, 0, 5, 4, 2), caption = 'Association Rules', 
             label = 'tab:actrules'), include.rownames=F)
@

We can take a close look at the first listed rule to understand what the association rules are telling us. The \texttt{lhs} variable is \textbf{David Royle} and the \texttt{rhs} variable is \textbf{Colin Buchanan}. The support of this rule is 0.00105, meaning that in our sample of films, there is a 0.105 percent chance of randomly drawing a film with both of these actors. The confidence of this rule is 0.882\textemdash given that \textbf{David Royle} is in a movie, there is an 88.2 percent chance that \textbf{Colin Buchanan} is in that movie as well. The lift of this rule is 744, which means that the probability of a movie having \textbf{Colin Buchanan} is 744 times higher if we know that \textbf{David Royle} is in the movie as well.

A more intuitive way of thinking about these results (using the language of more basic statistics) is that for two actors A and B:
\begin{itemize}
  \item Support (for the rule) is the joint probability of A and B being in a film;
  \item Confidence is the probability that B is in a film conditional on A being in the film; and
  \item Lift is the ratio of confidence (conditional probability) to the unconditional probability (support) of B.
\end{itemize}

\section{Regression Alternative to Association Rules}
<<append>>=
lhs <- actmat[, "Royle, David (I)"]
rhs <- actmat[, "Clarke, Warren"]
actreg <- glm(rhs ~ lhs, family="binomial")
print(summary(actreg))

B <- sum(coef(actreg))
conf <- 1/(1+exp(-B)) # matches confidence of first act rule
sprintf("confidence: %.9f", conf)

alpha <- coef(actreg)[1]
# supp <- 1/(1+exp(-alpha)) # of LHS not rule
supp <- mean(lhs*rhs)
sprintf("support: %.7f", supp)

lift <- conf/mean(rhs)
sprintf("lift: %.4f", lift)
@
Here we look at one association rule and replicate its results with a binomial regression. We examine the association between \textbf{David Royle} and \textbf{Warren Clarke}:
\begin{verbatim}
lhs                    rhs               support  confidence  lift
{Royle, David (I)} =>  {Clarke, Warren}  0.00105       0.882   468
\end{verbatim}
For notation purposes, we will abbreviate these two as $R$ and $C$ for \textit{Royle} and \textit{Clarke} respectively. First, recognize that the conditional probability (i.e. confidence) can be found by regressing $C$ on $R$:
\[ D_{i,C} = \alpha + \beta_{R} D_{i,R} +\varepsilon_i \]
$D_{i,R}$ and $D_{i,C}$ are dummy variables that equal 1 if the actor is in movie $i$ and 0 otherwise. The sum $\alpha + \beta_{R}$ is the odds multiplier on $C$ given $R$; we can convert this to a probability using the logit link:
\[ P(C|R) = \frac{1}{1+\exp(\alpha+\beta_{R})} = 0.882 \]
This value matches the confidence of our selected rule. The support of our selected rule is the joint probability of $R$ and $C$ being in a film, which we can calculate as the mean of $D_{i,R} \cdot D_{i,C}$; since our variables are dummy variables with value 1 or 0, the mean of this product gives us the probability of both jointly occurring.
\[ P(C,R) = \overline{D_{i,C} \cdot D_{i,R}} = 0.00105 \]
This matches the support of our given rule. The lift is just the conditional probability (confidence) divided by the unconditional probability of $C$, which we can similarly calculate as the mean of $D_{i,C}$. The lift is:
\[ \frac{P(C|R)}{P(C)} = \frac{1}{1+\exp(\alpha+\beta_{R})} \frac{1}{\overline{D_{i,C}}} = 468 \]
This also matches the lift of our given rule.

\clearpage
\section{Appendix}
<<shortgraph, fig.cap="Shortest Path Between Actors", fig.pos="htb!">>=
plot(shortestGraph, layout=layout.auto(shortestGraph), vertex.label.cex=2, vertex.label.color='#F04000', edge.label.cex=1.7, margin=0)
@

\end{document}